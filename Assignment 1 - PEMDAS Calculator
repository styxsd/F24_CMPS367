//Assignment 1 - Part 1 
#include <iostream>
#include <stack>
#include <cctype>
#include <cmath>
#include <string>

using namespace std;

// Function to check if a character is an operator
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Function to get the precedence of an operator
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

// Function to perform arithmetic operations
double applyOperation(double a, double b, char op) {
    cout << a << " " << op << " " << b << " = "; // Show the operation being performed
    switch (op) {
        case '+': 
            cout << a + b << endl;
            return a + b;
        case '-': 
            cout << a - b << endl;
            return a - b;
        case '*': 
            cout << a * b << endl;
            return a * b;
        case '/': 
            if (b != 0) {
                cout << a / b << endl;
                return a / b;
            }
            throw runtime_error("Division by zero");
        case '^': 
            cout << pow(a, b) << endl;
            return pow(a, b);
        default: 
            return 0;
    }
}

// Function to evaluate the expression
double evaluateExpression(const string& expression) {
    stack<double> values;    // Stack to hold numbers
    stack<char> ops;         // Stack to hold operators

    for (size_t i = 0; i < expression.length(); ++i) {
        if (isspace(expression[i])) {
            continue;  // Ignore spaces
        }

        if (isdigit(expression[i])) {
            // If the character is a digit, build the number
            double val = 0;
            while (i < expression.length() && (isdigit(expression[i]) || expression[i] == '.')) {
                if (expression[i] == '.') {
                    // Handle decimal point
                    double decimalPlace = 0.1;
                    i++;
                    while (i < expression.length() && isdigit(expression[i])) {
                        val += (expression[i] - '0') * decimalPlace;
                        decimalPlace *= 0.1;
                        i++;
                    }
                    break;
                }
                val = (val * 10) + (expression[i] - '0');
                i++;
            }
            i--;  // Correct the extra increment in the loop
            values.push(val);
        } else if (expression[i] == '(') {
            ops.push(expression[i]);
        } else if (expression[i] == ')') {
            while (!ops.empty() && ops.top() != '(') {
                double val2 = values.top(); values.pop();
                double val1 = values.top(); values.pop();
                char op = ops.top(); ops.pop();
                values.push(applyOperation(val1, val2, op));
            }
            ops.pop();  // Pop the '('
        } else if (isOperator(expression[i])) {
            while (!ops.empty() && precedence(ops.top()) >= precedence(expression[i])) {
                double val2 = values.top(); values.pop();
                double val1 = values.top(); values.pop();
                char op = ops.top(); ops.pop();
                values.push(applyOperation(val1, val2, op));
            }
            ops.push(expression[i]);
        }
    }

    // Apply remaining operations
    while (!ops.empty()) {
        double val2 = values.top(); values.pop();
        double val1 = values.top(); values.pop();
        char op = ops.top(); ops.pop();
        values.push(applyOperation(val1, val2, op));
    }

    return values.top();
}

int main() {
    string expression;
    char choice;

    do {
        cout << "Enter an expression to evaluate: ";
        getline(cin, expression);

        try {
            double result = evaluateExpression(expression);
            cout << "Final Result: " << result << endl;
        } catch (const exception& e) {
            cout << "Error: " << e.what() << endl;
        }

        // Ask if the user wants to evaluate another expression
        cout << "Would you like to enter another equation? (y/n): ";
        cin >> choice;
        cin.ignore();  // To clear the newline left by cin

    } while (choice == 'y' || choice == 'Y');

    cout << "Goodbye!" << endl;
    return 0;
}
